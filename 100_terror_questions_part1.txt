Q: Why did you choose Information Technology as your major?
A: I chose IT because I've always been fascinated by how technology solves real-world problems. What really solidified my decision was in high school when I saw how inefficient manual processes were - paper forms, manual data entry, lost records. I realized that with the right technical skills, I could build systems that make people's lives easier. My capstone project is the perfect example - I built a digital system to replace the manual good moral certificate process at our university. Seeing how technology can streamline operations and help people drove me to pursue BSIT with a focus on Web and App Development.

Q: What makes you different from other fresh graduates?
A: Three things set me apart. First, I have a proven leadership track record - I'm currently JPCS President leading 17 officers and 100+ members, plus Executive Secretary of Student Government. Most fresh graduates don't have this level of leadership experience. Second, I maintain academic excellence while juggling these roles - I'm a President's Lister with perfect 1.00 grades in OOP and Information Management. Third, I don't just do schoolwork - I build real solutions. My capstone solved an actual problem at our university, and my COIL project involved international collaboration with Brazil. I combine technical skills, leadership, and real-world problem-solving in a way that's rare for fresh graduates.

Q: How do you stay updated with technology trends?
A: I use a multi-layered approach. First, I'm actively involved in HackTheNorth.ph seminars where I learn about emerging technologies from industry professionals. Second, through JPCS, I organize and attend tech workshops that expose me to current industry practices. Third, I follow technology blogs, documentation, and GitHub repositories to see what's new. Fourth, I pursue certifications - I just earned Cisco certifications in C++ and JavaScript in August 2025. Fifth, I learn by doing - when I hear about a new framework or tool, I build a small project with it to understand how it works. My approach isn't just passive consumption - it's active learning through seminars, workshops, certifications, and hands-on projects.

Q: Why should a company invest in training you?
A: Because I have a proven track record of rapid ROI when given learning opportunities. When I needed to learn Laravel for my capstone, I went from zero knowledge to building a complete web application with decision support features in one semester. That's rapid learning translated into real value. Companies should invest in training me because I don't waste learning opportunities - I immediately apply what I learn to deliver results. My perfect 1.00 grades in OOP and Information Management show I master concepts deeply, not superficially. I also multiply the value by teaching others - as JPCS President, I organize workshops where I share what I've learned with 100+ members. When you train me, you're not just improving one person - I'll help elevate the team around me.

Q: What's your biggest accomplishment?
A: My biggest accomplishment is building and successfully presenting my capstone project - the Good Moral Application and Monitoring System with Decision Support - while maintaining my role as JPCS President and achieving President's Lister status. This wasn't just about building a project. I led a 3-person team, did all the programming myself using Laravel and MySQL, designed a complex database with 500+ records, implemented decision support features that helped administrators make better decisions, and presented a working application at our Capstone Research Showcase. All while leading 17 officers in JPCS, maintaining grades between 1.00-1.75, and serving as Student Government Executive Secretary. The accomplishment isn't any single piece - it's proving I can deliver excellence across technical work, leadership, and academics simultaneously.

Q: Tell me about a time you disagreed with your professor or supervisor.
A: In my Database Management class, I disagreed with our professor's recommendation to denormalize a particular table structure for performance reasons. The professor suggested combining several normalized tables into one denormalized table to reduce joins and improve query speed. I respectfully raised my hand and explained that while denormalization can improve read performance, in our specific use case with frequent updates and data integrity requirements, the risks outweighed the benefits. I presented my reasoning: we'd introduce data redundancy, risk update anomalies, and complicate data validation. I also proposed an alternative - keeping the normalized structure but adding strategic indexes on foreign keys to improve join performance. The professor appreciated that I thought through the tradeoffs rather than just accepting the advice. We had a great discussion about when denormalization makes sense versus when proper indexing is the better solution. I learned that disagreeing isn't about being right - it's about presenting well-reasoned alternatives and being open to learning why your approach might be wrong.

Q: How do you handle criticism?
A: I've learned to separate criticism of my work from criticism of me as a person, which helps me receive feedback constructively. When I receive criticism, I first listen without getting defensive. In my capstone project review, a faculty member criticized my UI design as "too cluttered" and "not user-friendly enough." My initial reaction was defensive because I'd spent hours on that interface. But I listened to their specific points - too many fields on one page, unclear navigation, inconsistent button placement. Second, I ask clarifying questions to understand the root concern. I asked what specific tasks users found difficult and where they got confused. Third, I evaluate whether the criticism is valid. In this case, they were right - I was designing from a developer's perspective, not a user's perspective. Fourth, I take action. I redesigned the interface with clearer workflows, better visual hierarchy, and tested it with actual users. The result was much better. I learned that criticism isn't personal - it's information that helps me improve. The best leaders and developers actively seek criticism because it's how you grow.

Q: What motivates you to do your best work?
A: I'm motivated by seeing real impact from my work. When I built my capstone project, what drove me wasn't just getting a good grade - it was knowing that administrators at our university would actually use this system to make decisions about students. That sense of "this matters" pushes me to do excellent work. I'm also motivated by personal standards. I'm a President's Lister, which means I compete with myself to maintain excellence. When I see a 1.00 on my transcript, it's validation that I didn't cut corners. Third, I'm motivated by the people counting on me. As JPCS President with 17 officers and 100+ members, when I commit to organizing an event or workshop, people are depending on me to deliver. That responsibility drives me to do my best work. Finally, I'm motivated by growth. Every project, every challenge, every difficult problem is an opportunity to become a better developer and leader. I want to look back in five years and see clear evidence that I'm dramatically better than I am today.

Q: How do you prioritize tasks when everything is urgent?
A: I use a framework I've developed through managing multiple leadership roles, academics, and technical projects simultaneously. First, I distinguish between urgent and important using the Eisenhower Matrix. During my final semester, I had Capstone presentation (urgent + important), final exams (important, deadline approaching), and a major JPCS event (urgent, but could delegate). Second, I evaluate impact and dependencies. Capstone was a dependency for graduation, so it got top priority. Third, I communicate early about realistic timelines. When I realized I couldn't personally execute the JPCS event, I delegated to my executive board with clear guidance. Fourth, I block focused time for high-priority tasks. I worked in 4-hour focused blocks on my capstone and studied for exams in between using spaced repetition. Fifth, I'm ruthless about saying no to new commitments when my plate is full. I had to decline several opportunities during that period because I was at capacity. The result? I finished capstone 3 days early, maintained my grades, and successfully held the JPCS event. The key is honest assessment of capacity, clear communication, strategic delegation, and focused execution on what truly matters.

Q: What do you do when you don't know how to solve a problem?
A: I have a systematic approach to tackling unknown problems. First, I define the problem clearly. When I encountered N+1 query problems in my capstone's admin dashboard, I first confirmed that was actually the issue by checking query logs and performance metrics. Second, I break the problem into smaller pieces. Instead of "fix slow dashboard," I identified specific queries causing slowdowns. Third, I research systematically. I started with Laravel documentation on query optimization, then Stack Overflow for similar issues, then blog posts about Eloquent ORM best practices. Fourth, I test solutions incrementally. I didn't refactor everything at once - I fixed one query, tested performance, then moved to the next. Fifth, I'm not afraid to ask for help, but I come prepared. When I consulted with a classmate who had more Laravel experience, I explained what I'd already tried and what specific aspect I was stuck on. Sixth, I document the solution. I added comments in my code explaining why I used eager loading and how it solved the N+1 problem. This systematic approach - define, break down, research, test, ask smart questions, document - has worked for every technical challenge I've faced.

Q: Describe your ideal work environment.
A: My ideal work environment has four key elements. First, I need clear expectations and autonomy in execution. Tell me what success looks like, give me the resources and support, then let me figure out how to get there. In my capstone project, once I understood the requirements, I thrived having the autonomy to design the solution my way. Second, I want collaborative teammates who challenge my thinking. My best work happens when people question my assumptions. During my COIL project with Brazil, having teammates from different backgrounds made the final product better. Third, I need opportunities to learn from people more experienced than me. I'm early in my career - I don't want to be the smartest person in the room. I want mentorship, code reviews, and feedback that helps me grow rapidly. Fourth, I value a culture that respects focus time. I produce my best work in deep, uninterrupted blocks. When I need to ship something important, I need the ability to go heads-down for 3-4 hours without constant meetings or interruptions. Finally, I want my work to matter. I don't just want to build features - I want to solve real problems for real users. That sense of impact drives my best work.

Q: How do you handle stress and pressure?
A: I've developed specific strategies through managing high-pressure situations. First, I maintain non-negotiables even under pressure. During my busiest semester with Capstone, final exams, and JPCS events, I maintained minimum 6 hours sleep and regular meals. When I don't take care of basics, my performance degrades fast. Second, I use structured time blocking. Instead of feeling overwhelmed by everything, I assign specific time blocks to specific tasks. This prevents task-switching and gives me a sense of control. Third, I break large stressful projects into tiny achievable tasks. Instead of "build capstone," I had "design database schema," "implement user authentication," "build admin dashboard," etc. Completing small tasks builds momentum. Fourth, I delegate strategically when possible. As JPCS President, I couldn't handle everything during high-stress periods, so I delegated event execution to capable officers. Fifth, I'm honest about capacity. If I'm at my limit, I communicate early rather than overcommitting and failing. Finally, I maintain perspective. A bad grade or missed deadline isn't the end of the world. I've proven I can handle pressure by maintaining President's Lister status across seven semesters while juggling six leadership positions and major technical projects.

Q: Why do you want to work for our company specifically?
A: I need to be honest - I'd want to learn more about your company before giving a specific answer. But here's what I look for in companies that makes me excited to work there. First, I want to see that you're solving real problems that matter. I'm not interested in building features for the sake of features - I want my work to have real impact on users. Second, I look for strong engineering culture. Do you do code reviews? Do you invest in your developers' learning? Do you have senior engineers who mentor junior developers? Third, I evaluate growth opportunities. Can I see a clear path from entry-level to mid-level to senior? Will I be learning new technologies and taking on more responsibility? Fourth, I look at the team I'd be working with. Are they passionate about what they build? Do they collaborate well? Fifth, I consider company values. Do you value work-life balance? Do you support employees' professional development? If your company checks these boxes - real impact, strong engineering culture, clear growth path, great team, and aligned values - then I'd be genuinely excited to contribute. I'm not just looking for any job - I'm looking for a place where I can grow rapidly and do meaningful work.

Q: What's your management style as JPCS President?
A: My management style is collaborative leadership with clear accountability. First, I set clear vision and expectations. At the start of my term as JPCS President, I aligned my 17 officers on our goals for the year and what success looks like. Second, I delegate based on strengths. I don't try to do everything myself - I identify what each officer is good at and give them ownership. Third, I provide support without micromanaging. I check in at key milestones, offer help when they're stuck, but I don't hover over their work. Fourth, I create space for input. In our executive meetings, I actively ask for different perspectives before making decisions. Some of our best initiatives came from officers, not from me. Fifth, I hold people accountable with respect. If someone commits to a deliverable and misses it, we have a direct conversation about what happened and how to prevent it next time. Sixth, I lead by example. If I'm asking officers to work hard, I'm working harder. If I'm asking them to show up prepared, I'm the most prepared person in the room. The result is that my team feels trusted, valued, and accountable - which is why we've been able to execute major events and workshops successfully.

Q: How would your classmates describe you?
A: My classmates would probably describe me as driven, reliable, and surprisingly approachable despite being busy. They'd say I'm driven because I'm always working on something - whether it's a coding project, JPCS activities, or student government work. They see me maintaining President's Lister status while juggling leadership roles and know I don't do things halfway. They'd say I'm reliable because when I commit to something, I follow through. If I say I'll help with a project or attend a meeting, I show up prepared. In group projects, they know I'll deliver my part on time and at high quality. They'd probably also say I'm approachable despite my schedule. I make time to help classmates with coding problems or explain database concepts. Being JPCS President and Student Government Executive Secretary could make me seem intimidating, but I try to be someone people feel comfortable approaching. They might also describe me as organized to the point of being intense - I have structured schedules, detailed to-do lists, and color-coded calendars. Some probably think I'm too serious or work too hard, which is fair criticism. But overall, I think they'd describe me as someone who sets high standards for themselves, delivers on commitments, and genuinely wants to help others succeed.

Q: What would you do in your first 30 days at our company?
A: I have a clear 30-day plan focused on learning, building relationships, and early contributions. Week 1: I'd focus on onboarding and foundation. I'd set up my development environment, read all documentation, understand the codebase architecture, and meet my team members. I'd ask tons of questions - not just "how do I do this" but "why do we do it this way?" I'd also clarify expectations with my manager about what success looks like in my first 30-60-90 days. Week 2: I'd start making small contributions. I'd pick up beginner-friendly tickets or bug fixes to get familiar with the workflow, coding standards, and review process. I'd focus on quality over speed - better to ship one excellent small fix than rush through several mediocre ones. Week 3-4: I'd take on a small feature or improvement project. Something meaningful but scoped small enough that I can complete it in about a week. This proves I can take ownership of something end-to-end. Throughout the 30 days, I'd be building relationships - grabbing virtual coffee with team members, asking about their work, learning who the subject matter experts are for different areas. By day 30, I want to have: made at least 3-5 meaningful code contributions, built relationships with key team members, demonstrated I can learn your stack quickly, and identified where I can add the most value in months 2-3. I'd also ask for feedback at the 30-day mark - what am I doing well, where should I improve?

Q: How do you handle ambiguity?
A: I've learned to be comfortable with ambiguity through projects where requirements weren't perfectly clear. When I started my capstone project, the initial requirement was just "build a good moral application system." That's incredibly vague. Here's how I handle ambiguity: First, I ask clarifying questions to reduce ambiguity where possible. I met with administrators who would use the system to understand their actual workflow and pain points. Second, I make reasonable assumptions and document them. I assumed administrators needed decision support based on university policies, and I wrote down those assumptions to validate later. Third, I build iteratively rather than trying to solve everything upfront. I built a basic request submission flow first, got feedback, then added the decision support features. Fourth, I communicate progress and assumptions regularly. I showed my advisor prototypes every two weeks to catch if I was going in the wrong direction. Fifth, I'm comfortable pivoting when new information emerges. Midway through my capstone, I realized administrators needed a timeline view, which wasn't in the original scope, but I adapted and added it. The key is: reduce ambiguity through questions, make documented assumptions, build iteratively, communicate frequently, and stay flexible when new information emerges.

Q: What's your experience with remote work or distributed teams?
A: I have substantial experience with remote and distributed work through both my COIL project and my organizational leadership during the pandemic era. My COIL project with Brazil was entirely remote and distributed across two countries with significant time zone differences. I led that team using Zoom for meetings, Google Workspace for collaboration, and GitHub for code management. We had to coordinate across language barriers (we worked in English, Ilocano, Itawes, Ibanag, and Portuguese), cultural differences, and 11-12 hour time zones. I learned to over-communicate in writing, record meetings for those who couldn't attend live, and use asynchronous collaboration tools effectively. For JPCS and Student Government, much of our coordination happens remotely. I manage 17 officers primarily through Slack, Google Meet, and shared documents. I've learned that remote work requires different skills than in-person work - you need to be more intentional about communication, more disciplined about documentation, and more proactive about building relationships. I have a dedicated home office setup with reliable 50+ Mbps internet, and I'm comfortable with tools like Zoom, Microsoft Teams, Slack, Trello, and GitHub. I can work effectively across time zones - I'm in UTC+8 but can accommodate 2-3 hours overlap with other zones. Remote work isn't a barrier for me - it's a mode of work I'm already comfortable and productive in.

Q: How do you measure success in your work?
A: I measure success across three dimensions: impact, quality, and growth. First, impact: Did my work solve a real problem or create real value? For my capstone project, success wasn't just finishing it - it was building something administrators could actually use to make better decisions faster. I measure impact by asking: are users' lives better because of what I built? Second, quality: Did I build it right? I measure quality through code reviews, testing, performance metrics, and user feedback. A feature shipped with bugs isn't success even if it meets the deadline. In my capstone, I measured quality by achieving 99.5% data validation accuracy across 1000+ transactions. Third, growth: Did I learn something new or develop a new skill? Every project should make me a better developer. When I finished my capstone, success meant I'd mastered Laravel, improved my database design skills, and learned how to implement decision support logic. I also measure success by team outcomes when I'm leading. As JPCS President, success isn't just what I personally accomplish - it's whether my 17 officers are growing, whether our 100+ members are getting value, and whether we're executing events that help people develop their tech skills. The combination of user impact, technical quality, and personal growth is how I define success.

Q: Tell me about a time you had to learn something quickly.
A: When I started my capstone project, I had to learn Laravel framework from scratch in about two weeks to meet our sprint timeline. I had PHP basics but zero Laravel experience, and I needed to build a functional authentication system, database integration, and basic CRUD operations by the end of week 2. Here's how I approached rapid learning: First, I started with official Laravel documentation and followed their quickstart tutorial to understand the framework's philosophy - MVC architecture, routing, Eloquent ORM, Blade templating. Second, I built a mini practice project - a simple task manager - to learn by doing before touching my actual capstone code. This low-stakes practice let me make mistakes without consequences. Third, I focused on just-in-time learning. Instead of trying to learn everything about Laravel, I learned what I needed for authentication first, then what I needed for database operations, then what I needed for form validation. Fourth, I studied real Laravel projects on GitHub to see how experienced developers structure their code. Fifth, when I got stuck, I used Stack Overflow and Laravel community forums, but I made sure to understand the solution, not just copy-paste it. The result? By week 2, I had working authentication and basic CRUD operations. By the end of the semester, I'd built a complete web application with complex decision support features. My approach - official docs, hands-on practice, just-in-time learning, study real code, and understand rather than copy - has worked for every rapid learning challenge I've faced.

Q: What's your approach to debugging complex issues?
A: I have a systematic debugging methodology I've developed through numerous frustrating bugs. First, I reproduce the issue reliably. When I had a strange data validation error in my capstone, I first confirmed I could make it happen consistently with specific inputs. If you can't reproduce it, you can't fix it. Second, I isolate the problem. Is it frontend validation, backend validation, or database constraints? I test each layer separately to narrow down where the bug actually lives. Third, I use scientific method - form hypotheses and test them. I hypothesized the validation error was related to date formatting, so I tested with different date formats to confirm or reject that hypothesis. Fourth, I check the obvious first. Is it a typo? Did I forget to save a file? Is the server actually running the latest code? Embarrassingly often, the bug is something simple. Fifth, I add strategic logging or use debugger breakpoints to see what's actually happening versus what I think is happening. The code does exactly what I tell it to do, not what I mean for it to do. Sixth, I take breaks when stuck. Some of my best debugging breakthroughs came after stepping away for 20 minutes. Seventh, I document the solution. When I fix a tricky bug, I add a comment explaining why it was happening and how the fix works, so future me (or teammates) understand it. Finally, I ask why it happened in the first place and if there's a systemic fix to prevent similar bugs.
